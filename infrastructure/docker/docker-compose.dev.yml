version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: seva-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-seva_ai}
      POSTGRES_USER: ${POSTGRES_USER:-seva_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-seva_password}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../database/postgresql/schemas:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-seva_user} -d ${POSTGRES_DB:-seva_ai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - seva-network

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: seva-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere'
      CLUSTER_HOSTNAME: 'node1'
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - seva-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: seva-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - seva-network

  # Adminer - Database Management UI
  adminer:
    image: adminer:latest
    container_name: seva-adminer
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - seva-network

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ../nginx
      dockerfile: Dockerfile
    container_name: seva-nginx
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - seva-network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    container_name: seva-backend
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-seva_user}:${POSTGRES_PASSWORD:-seva_password}@postgres:5432/${POSTGRES_DB:-seva_ai}
      WEAVIATE_URL: http://weaviate:8080
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      SECRET_KEY: ${SECRET_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      weaviate:
        condition: service_healthy
    volumes:
      - ../../backend:/app
    networks:
      - seva-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  weaviate_data:
    driver: local
  redis_data:
    driver: local

networks:
  seva-network:
    driver: bridge
